@@startuml Class diagram
/'  -fieldPrivate
    #fieldProtected
    +fieldPublic
'/

/'
note top of User: Base class
note top of Movie: Base class
'/

class User
{
    Fields
    --
    - String final username;
    - String final password;
    - HashMap<Movie, Integer> ratedMovies;
    ==
    Methods
    --
    +User()
    +User(String username, String password, HashMap<Movie, Integer> ratedMovies)
    +User(String username, String password)
    +String getUsername()
    +String getPassword()
    +HashMap<Movie, Integer> getRatedMovies()
    +void rateMovie(Movie movie, Integer myRating)
    +boolean hasRatedMovie(Movie movie)
    +void deleteMovie(Movie movie)
    +boolean equals(Object object)
    +int HashCode()

}
class UserRegister
{
    Fields
    --
    -List<User> users
    -UserHandler userHandler
    -MovieRegister movieRegister
    ==
    Methods
    --
    +UserRegister(String userFileName, String movieFileName)
    +void registerNewUser(User user)
    +List<User> getUsers()
    +User getUser(String username)
    +existingUser(String username, String password)
    +void updateMovieAndUser(User user, Movie movie)
    +void updateUser(User user)
    +List>User> getAllUsers()
}
class UserHandler
{
    Fields
    --
    -final String fileName
    ==
    Methods
    --
    +UserHandler(String filename)
    +File getFile()
    +void writeUserToRegister(User user)
    +List<User> readUsersFromRegister()
    +void updateRegister(User user)
    -User userExists(User user)
    +boolean fileExists()


}
class Movie
{
    Fields
    --
    -final String title
    -final String genre
    -List<Integer> allRatings
    - {static} List<String> GENRES
    ==
    Methods
    --
    +Movie()
    +Movie(String title, String genre, List<Integer> allRatings)
    +Movie(String title, String genre)
    +String getTitle()
    +String getGenre()
    +List<Integer> getAllRatings()
    +void addRating(int rating)
    +Double averageRating()
    +String toString()  
    +void deleteMovie(int rating)
    +boolean equals(Object object)  
    +int hashCode()

}
class MovieRegister
{
    Fields
    --
    -List<Movie> movies
    -MovieHandler handler
    ==
    Methods
    --
    +MovieRegister(String filename)
    +void addMovie(Movie movie)
    +void updateMovie(Movie movie)
    +List<Movie> searchGenre(String genre)
    +List<Movie> searchMovieTitle(String title)
    +Movie getMovie(String title, String genre)
    -boolean movieExists(Movie movie)
    -List<Movie> getAllMovies()
    
}
class MovieHandler
{
    Fields
    --
    -final String fileName
    ==
    Methods
    --
    +MovieHandler(String fileName)
    +File getFile()
    +void writeMovieToRegister(Movie movie)
    +void updateMovieInRegister(Movie movie)
    -List<Movie> updateMovieListWithNewMovie()
    +List<Movie> readMovieAndRatingFromRegister()
    +Boolean fileExists()
}

class MovieRatingSpringController
{
 /** methods to connect users ui-actions to server
}

class MovieRatingController
{
   /** methods to connect users ui-actions to classes
}

class RemoteMovieRatingAccess
{
    Fields
    --
    -final URI endpointBaseUri
    -Objectmapper obejctmapper
    -List<User> userList;
    -List<Movie> movieList;
    ==
    Methods
    --
    +URI resolveUri(String uri)
    +RemoteMovieRatingAccess(URI endpointbaseUri)
    +List<Movie> getMovieRegister() 
    +List<User> getAllUsers()
    +Movie getMovie(String title, String genre)
    +List<Movie> searchGenre(String genre)
    +List<Movie> searchMovieTitle(String title)
    +void addMovie(Movie movie)
    +User getUser(String username)
    +void registerNewUser(User user)
    +void updateMovieAndUser(User user, Movie movie) 
    +void updateUser(User user)
    +void updateMovie(Movie movie)

}



UserRegister "1..*" --|> "n..*" User : > Enables handling of \nusers to and from register
/': label 1'/
UserRegister "1..*" --|> "n..*" UserHandler  : > instruction read/write
UserHandler "1..*" --|> "n..*" User : > Saves and loads \nuser objects

Movie "n..*" <|-- "1..*" User : < watches
MovieRegister "1..*" --|> "n..*" MovieHandler : > instruction read/write
MovieHandler "1..*" --|> "n..*" Movie : > Saves and loads \numovie objects
MovieRegister "n..*" <|--  "1..*" UserRegister : < updates rating in movie register
MovieRegister "1..*" --|> "n..*" Movie : > Enables handling of \nmovies to and from register
RemoteMovieRatingAccess "1..*" --|> "n..*" User : > gets user objects
RemoteMovieRatingAccess "1..*" --|> "n..*" Movie : > gets movie objects
MovieRatingSpringController
MovieRatingController

@@enduml
